{"version":3,"sources":["webpack:///webpack/bootstrap 0f06d0a96cb6aa9c0bc4","webpack:///./lib/galaga.js","webpack:///./lib/game.js","webpack:///./lib/ship.js","webpack:///./lib/moving_object.js","webpack:///./lib/utils.js","webpack:///./lib/enemy.js","webpack:///./lib/bullet.js","webpack:///./lib/game_view.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAC;;;;;;;ACXD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB,WAAW;AAC5B,yBAAwB,yEAAyE;AACjG;AACA,kBAAiB,WAAW;AAC5B,yBAAwB,+FAA+F;AACvH;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA,kBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA,IAAG;AACH;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA,kBAAiB,uBAAuB;AACxC,wBAAuB,uBAAuB;AAC9C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qCAAoC,wGAAwG;AAC5I;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C,uGAAuG;AACjJ,2CAA0C,uGAAuG;AACjJ,IAAG;AACH;AACA;AACA,2CAA0C,sGAAsG;AAChJ;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;AChJA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;;;;;;ACnBA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA,EAAC;AACD;;AAEA;;;;;;;ACfA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AChBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;;;;AC1BA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 0f06d0a96cb6aa9c0bc4\n **/","const Game = require('./game');\nconst GameView = require(\"./game_view\");\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const canvas = document.getElementById(\"game-canvas\");\n  canvas.width = Game.DIM_X;\n  canvas.height = Game.DIM_Y;\n\n  const ctx = canvas.getContext(\"2d\");\n  const game = new Game();\n  new GameView(game, ctx).start();\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/galaga.js\n ** module id = 0\n ** module chunks = 0\n **/","const Ship = require('./ship');\nconst Enemy = require('./enemy');\nconst Utils = require('./utils');\nconst Bullet = require('./bullet');\n\nconst Game = function () {\n  this.enemies = [];\n  this.userBullets = [];\n  this.computerBullets = [];\n  this.ships = [];\n  this.BG_COLOR = \"#000000\";\n  this.DIM_X = Game.DIM_X;\n  this.DIM_Y = Game.DIM_Y;\n  this.lives = 3;\n  this.score = 0;\n  this.addEnemies();\n};\n\nGame.prototype.addEnemies = function(){\n  const times = 10;\n  for (let i = 0; i < times; i++) {\n    this.add(new Enemy({game: this, position: [i * 40, 50], imgsrc: './images/Yellow_galaga.png'}));\n  }\n  for (let i = 0; i < times; i++) {\n    this.add(new Enemy({game: this, position: [i * 40, 90], imgsrc: './images/red_sprite_3.png', width: 30, height: 30}));\n  }\n};\n\nGame.prototype.addShip = function() {\n  const ship = new Ship ({\n    game: this,\n    position: [this.DIM_X - 300, this.DIM_Y - 100]\n  });\n\n  this.add(ship);\n  return ship;\n};\n\nGame.prototype.allObjects = function() {\n  return [].concat(this.ships, this.enemies, this.userBullets, this.computerBullets);\n};\n\nGame.prototype.draw = function(ctx) {\n  ctx.clearRect(0, 0, this.DIM_X, this.DIM_Y);\n  ctx.fillStyle = this.BG_COLOR;\n  ctx.fillRect(0, 0, this.DIM_X, this.DIM_Y);\n  this.allObjects().forEach((object) => {\n    object.draw(ctx);\n  });\n  ctx.fillStyle = \"#3a3838\";\n  ctx.fillRect(750, 0, 250, this.DIM_Y);\n  ctx.font = \"16px myFont\";\n  ctx.fillStyle = \"white\";\n  ctx.fillText(\"Score: \" + this.score, this.DIM_X - 200, 250);\n  for (let i = 0; i < this.lives - 1; i++) {\n    let img = new Image();\n    img.src = './images/Galaga_ship.png';\n    ctx.drawImage(img, (this.DIM_X - 200) + (i * 40), 300, 30, 30);\n  }\n};\n\nGame.prototype.add = function (object) {\n  if (object instanceof Enemy) {\n    this.enemies.push(object);\n  } else if (object instanceof Bullet) {\n    this.userBullets.push(object);\n  } else if (object instanceof Ship) {\n    this.ships.push(object);\n  } else {\n    throw \"wtf?\";\n  }\n};\n\nGame.prototype.checkCollisions = function() {\n  const allObjects = this.allObjects();\n  for (let i = 0; i < allObjects.length; i++) {\n    for (let j = i + 1; j < allObjects.length; j++) {\n      const obj1 = allObjects[i];\n      const obj2 = allObjects[j];\n\n      if (obj1.isCollidedWith(obj2)) {\n        const collision = obj1.collideWith(obj2);\n        if (obj1 instanceof Enemy && obj2 instanceof Bullet) {\n          const e = this.enemies.indexOf(obj1);\n          const b = this.userBullets.indexOf(obj2);\n          // check to see if the Bullet is a userBullet, because computerBullets should not destroy enemies\n          if (e > -1 && b > -1) {\n            this.enemies.splice(e, 1);\n            this.userBullets.splice(b, 1);\n            this.score += 100;\n          }\n        }\n        if (obj1 instanceof Ship && obj2 instanceof Bullet) {\n          this.ships = [];\n          const b = this.computerBullets.indexOf(obj2);\n          this.computerBullets.splice(b, 1);\n          this.lives -= 1;\n          setTimeout(() => this.respawnIfLivesLeft(), 1500);\n        }\n        if (collision) return;\n      }\n    }\n  }\n};\n\nGame.prototype.fireBullet = function(position) {\n  if (this.userBullets.length === 2) {\n    return;\n  }\n  this.userBullets.push(new Bullet({position: [position[0] + 10, position[1] - 40], game: this, dy: [0, -10], imgsrc: './images/bullet.png'}));\n};\n\nGame.prototype.fireComputerBullets = function() {\n  // if there's more than 1 enemy still alive, find two of them to fire randomly\n  if (this.enemies.length > 1) {\n    // Get two random indices\n    let a = Math.floor(Math.random() * this.enemies.length);\n    let b = Math.floor(Math.random() * this.enemies.length);\n    // Ensure that the two indicies are different\n    while (a === b) {\n      b = Math.floor(Math.random() * this.enemies.length);\n    }\n    // Then grab the enemies from the enemies array\n    let pos1 = this.enemies[a].position;\n    let pos2 = this.enemies[b].position;\n    this.computerBullets.push(new Bullet({position: [pos1[0] + 10, pos1[1] + 40], game: this, dy: [0, 5], imgsrc: './images/computer_bullet.png'}));\n    this.computerBullets.push(new Bullet({position: [pos2[0] + 10, pos2[1] + 40], game: this, dy: [0, 5], imgsrc: './images/computer_bullet.png'}));\n  } else if (this.enemies.length === 1) {\n    // if there's one enemy alive, we want it to fire without throwing an error\n    let pos = this.enemies[0].position;\n    this.computerBullets.push(new Bullet({position: [pos[0] + 10, pos[1] + 40], game: this, dy: [0, 10], imgsrc: './images/computer_bullet.png'}));\n  }\n};\n\nGame.prototype.respawnIfLivesLeft = function() {\n  if (this.lives > 0) {\n    this.addShip();\n  }\n};\n\n// Galaga.js uses these constants. keep.\nGame.DIM_X = 1000;\nGame.DIM_Y = 600;\n\nmodule.exports = Game;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/game.js\n ** module id = 1\n ** module chunks = 0\n **/","const MovingObject = require('./moving_object');\nconst Util = require('./utils');\n\nconst Ship = function(options) {\n  MovingObject.call(this, options);\n  this.game = options.game;\n  this.position = options.position;\n  this.width = 40;\n  this.height = 40;\n  this.img = new Image ();\n  this.img.src = './images/Galaga_ship.png';\n};\nUtil.inherits(Ship, MovingObject);\n\nShip.prototype.collideWith = function(otherObject){\n  // console.log(\"in the ship collide with\");\n};\n\n\nmodule.exports = Ship;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/ship.js\n ** module id = 2\n ** module chunks = 0\n **/","const Util = require('./utils');\nconst Ship = require('./ship');\n\nfunction MovingObject (options) {\n  this.position = options.position;\n  this.game = options.game;\n}\n\nMovingObject.prototype.move = function(delta) {\n  if (this.direction === \"right\") {\n    this.position[0] = this.position[0] + this.dx;\n  }\n  if (this.direction === \"left\") {\n    this.position[0] = this.position[0] - this.dx;\n  }\n  if (delta) {\n    this.position = [this.position[0] + delta[0], this.position[1] + delta[1]];\n\n    //Prevents the 40px ship from moving off the 1000px wide screen, with a padding of 10px\n    this.position[0] = Math.max(10, Math.min(this.position[0], this.game.DIM_X - 300));\n  }\n};\n\nMovingObject.prototype.isCollidedWith = function(otherObject) {\n  const centerDist = Util.dist(this.centerPoint(), otherObject.centerPoint());\n  return centerDist < ((this.height / 2) + (otherObject.height / 2));\n};\n\nMovingObject.prototype.draw = function(ctx) {\n  ctx.drawImage(this.img, this.position[0], this.position[1], this.width, this.height);\n};\n\nMovingObject.prototype.collideWith = function (otherObject) {\n  // default do nothing\n};\n\nMovingObject.prototype.fireBullet = function() {\n  // console.log(\"firing mah lazers!\");\n};\n\nMovingObject.prototype.centerPoint = function(){\n  return [this.position[0] + (this.width / 2), this.position[1] + (this.height / 2)];\n};\n\nmodule.exports = MovingObject;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/moving_object.js\n ** module id = 3\n ** module chunks = 0\n **/","const Util = {\n  inherits(childClass, parentClass) {\n    function Surrogate () {}\n    Surrogate.prototype = parentClass.prototype;\n    childClass.prototype = new Surrogate();\n    childClass.prototype.constructor = childClass;\n  },\n\n  dist (pos1, pos2) {\n  return Math.sqrt(\n    Math.pow(pos1[0] - pos2[0], 2) + Math.pow(pos1[1] - pos2[1], 2)\n  );\n},\n};\n\nmodule.exports = Util;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/utils.js\n ** module id = 4\n ** module chunks = 0\n **/","const MovingObject = require('./moving_object');\nconst Util = require('./utils');\nconst Bullet = require('./bullet');\n\nfunction Enemy (options) {\n  MovingObject.call(this, options);\n  this.direction = \"right\";\n  this.position = options.position;\n  this.width = 40;\n  this.height = 40;\n  this.dx = 2;\n  this.img = new Image ();\n  this.img.src = options.imgsrc;\n}\nUtil.inherits(Enemy, MovingObject);\n\nmodule.exports = Enemy;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/enemy.js\n ** module id = 5\n ** module chunks = 0\n **/","const Util = require('./utils');\nconst MovingObject = require('./moving_object');\n\nfunction Bullet (options) {\n  MovingObject.call(this, options);\n  this.dy = options.dy;\n  this.position = options.position;\n  this.width = 20;\n  this.height = 20;\n  this.game = options.game;\n  this.img = new Image ();\n  this.img.src = options.imgsrc;\n}\nUtil.inherits(Bullet, MovingObject);\n\nBullet.prototype.collideWith = function(otherObject){\n  // console.log(\"in the bullet collide with\");\n  // if (otherObject instanceof Bullet) {\n  //   this.remove();\n  //   console.log(\"getting here\");\n  //   otherObject.remove();\n  //   return true;\n  // }\n};\n\n\nmodule.exports = Bullet;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/bullet.js\n ** module id = 6\n ** module chunks = 0\n **/","/* globals key*/\n\nconst Ship = require('./ship');\n\nconst GameView = function(game, ctx) {\n  this.game = game;\n  this.ctx = ctx;\n  this.ship = this.game.addShip();\n};\n\nGameView.prototype.start = function () {\n  this.bindKeyHandlers();\n  this.attack();\n  //start the animation\n  requestAnimationFrame(this.animate.bind(this));\n};\n\nGameView.prototype.animate = function(time){\n  // LET'S ANIMATE BABY\n  this.game.draw(this.ctx);\n  this.moveEnemies();\n  this.moveBullets();\n  if (this.ship) {\n    this.moveShip();\n  }\n  this.game.checkCollisions();\n  this.removeBullets();\n  //every call to animate requests causes another call to animate.\n  //need to set a timeout to allow other async functions, like firing computer\n  //bullets, and pausing between respawns, to execute.\n  let that = this;\n  setTimeout(() => requestAnimationFrame(this.animate.bind(this)), 0);\n};\n\nGameView.prototype.bindKeyHandlers = function () {\n  const ship = this.ship;\n  key(\"space\", () => {\n    this.game.fireBullet(this.ship.position);\n  });\n};\n\nGameView.prototype.moveShip = function(){\n  if (key.isPressed(\"A\")) this.ship.move([-5, 0]);\n  if (key.isPressed(\"D\")) this.ship.move([5, 0]);\n};\n\nGameView.prototype.moveEnemies = function() {\n  if (this.game.enemies.length === 0) {\n    return;\n  }\n  if (this.game.enemies.some(enemy => (enemy.position[0] + 290 > this.game.DIM_X))) {\n    this.game.enemies.forEach((enemy) => {\n      enemy.direction = \"left\";\n    });\n  }\n  if (this.game.enemies.some(enemy => (enemy.position[0] < 0 ))) {\n    this.game.enemies.forEach((enemy) => {\n      enemy.direction = \"right\";\n    });\n  }\n  this.game.enemies.forEach((enemy) => {\n    enemy.move();\n  });\n};\n\nGameView.prototype.moveBullets = function() {\n  this.game.userBullets.forEach((bullet) => {\n    bullet.move(bullet.dy);\n  });\n  this.game.computerBullets.forEach((bullet) => {\n    bullet.move(bullet.dy);\n  });\n};\n\nGameView.prototype.removeBullets = function() {\n  this.game.userBullets.forEach((bullet, idx) => {\n    if (bullet.position[1] < 0) {\n      this.game.userBullets.splice(idx, 1);\n    }\n  });\n  this.game.computerBullets.forEach((bullet, idx) => {\n    if (bullet.position[1] > this.game.DIM_Y) {\n      this.game.computerBullets.splice(idx, 1);\n    }\n  });\n  if (this.game.ships[0]){\n    this.ship = this.game.ships[0];\n  }\n};\n\nGameView.prototype.attack = function(){\n  this.attackInterval = setInterval(() => this.game.fireComputerBullets(), 2500);\n};\n\nGameView.MOVES = {\n  \"a\": [-10],\n  \"d\": [ 10],\n};\n\nmodule.exports = GameView;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/game_view.js\n ** module id = 7\n ** module chunks = 0\n **/"],"sourceRoot":""}